Integer validator module:
=========================

Import module:
==============
    >>> BaseGeometry = __import__('7-base_geometry').BaseGeometry
    >>> bg = BaseGeometry()


Tests:
======

Test case #0: A test case with good parameters
    
    >>> bg.integer_validator("my_int", 33)


Test case #1: A test case with other good parameters

    >>> bg.integer_validator("width", 33)


Test case #2: A test case with a not integer value

    >>> try:
    ...     bg.integer_validator("name", "Goku")
    ... except Exception as e:
    ...     print("[{}] {}".format(e.__class__.__name__, e))
    [TypeError] name must be an integer

Test case #3: A test case with a infinite float value

    >>> try:
    ...     bg.integer_validator("inf_float", 1e800)
    ... except Exception as e:
    ...     print("[{}] {}".format(e.__class__.__name__, e))
    [TypeError] inf_float must be an integer

Test case #4: A test case with a NaN value

    >>> try:
    ...     bg.integer_validator("nan", float('nan'))
    ... except Exception as e:
    ...     print("[{}] {}".format(e.__class__.__name__, e))
    [TypeError] nan must be an integer

Test case #5: A test case with a boolean value

    >>> try:
    ...     bg.integer_validator("name", True)
    ... except Exception as e:
    ...     print("[{}] {}".format(e.__class__.__name__, e))
    [TypeError] name must be an integer

Test case #6: A test case with a tuple value

    >>> try:
    ...     bg.integer_validator("name", (14, ))
    ... except Exception as e:
    ...     print("[{}] {}".format(e.__class__.__name__, e))
    [TypeError] name must be an integer

Test case #7: A test case with a string value

    >>> try:
    ...     bg.integer_validator("name", "Son Goku")
    ... except Exception as e:
    ...     print("[{}] {}".format(e.__class__.__name__, e))
    [TypeError] name must be an integer

Test case #8: A test case with a none value

    >>> try:
    ...     bg.integer_validator("name", None)
    ... except Exception as e:
    ...     print("[{}] {}".format(e.__class__.__name__, e))
    [TypeError] name must be an integer

Test case #9: A test case with a list value

    >>> try:
    ...     bg.integer_validator("name", [])
    ... except Exception as e:
    ...     print("[{}] {}".format(e.__class__.__name__, e))
    [TypeError] name must be an integer

Test case #10: A test case with a dictionary value

    >>> try:
    ...     bg.integer_validator("name", {3, 4})
    ... except Exception as e:
    ...     print("[{}] {}".format(e.__class__.__name__, e))
    [TypeError] name must be an integer

Test case #11: A test case with a class value

    >>> try:
    ...     bg.integer_validator("name", object)
    ... except Exception as e:
    ...     print("[{}] {}".format(e.__class__.__name__, e))
    [TypeError] name must be an integer

Test case #12: A test case without value

    >>> try:
    ...     bg.integer_validator("name")
    ... except Exception as e:
    ...     print("[{}] {}".format(e.__class__.__name__, e))
    [TypeError] integer_validator() missing 1 required positional argument: 'value'

Test case #13: A test case without value

    >>> try:
    ...     bg.integer_validator()
    ... except Exception as e:
    ...     print("[{}] {}".format(e.__class__.__name__, e))
    [TypeError] integer_validator() missing 2 required positional arguments: 'name' and 'value'

Test case #14: A test case with zero as value

    >>> try:
    ...     bg.integer_validator("age", 0)
    ... except Exception as e:
    ...     print("[{}] {}".format(e.__class__.__name__, e))
    [ValueError] age must be greater than 0

Test case #15: A test case with a value less than zero

    >>> try:
    ...     bg.integer_validator("distance", -4)
    ... except Exception as e:
    ...     print("[{}] {}".format(e.__class__.__name__, e))
    [ValueError] distance must be greater than 0

Test case #16: A test case with a not available method

    >>> try:
    ...     bg.area()
    ... except Exception as e:
    ...     print("[{}] {}".format(e.__class__.__name__, e))
    [Exception] area() is not implemented
